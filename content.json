{"posts":[{"title":"Learn Vim Efficiently 1","text":"前言：学linux时接触了vim这个编辑器，当时只知道三种模式转换，并不觉得vim有多好用。 缘起：看南大蒋炎岩操作系统课程时，jyy在shell上键指如飞，我就思考为什么他能够编辑得这么快。我想到的一个点就是光标的移动。在没有接触vim之前，我都是通过键盘右下角的上下左右键进行光标的移动，这意味着右手需要移动一段距离。而接触vim之后，hjkl的移动映射只能说真香。现在我恨不得接触到的每个文本编辑器都有vim工作模式。 推荐阅读： https://github.com/iggredible/Learn-Vim https://missing.csail.mit.edu/2020/editors/ 快速体验：力扣刷题设置绑定vim键位，快速体验vim。 0 三种工作模式知道vim的三种工作模式 ：编辑模式（insert mode）、命令行模式（command line mode）、正常模式（normal mode） 编辑模式：最一般的文本编辑 按i进入，&lt;Esc&gt;退出 命令行模式：保存文件，离开，读入文件，显示行号等 按:显示，&lt;Esc&gt;退出 正常模式：光标移动、删除、复制粘贴、查找替换 初始模式，&lt;Esc&gt;总能返回normal mode 推荐将&lt;Esc&gt;键位映射至&lt;Caps&gt;键位。 1 hjkl光标移动与插入模式在normal mode下，可以通过hjkl键进行光标的移动，练会以后很香。 光标移动： 123456h Leftj Downk Upl Rightw 移动到下一个单词（挖坑、w和W区别）b 反向移动到下一个单词 插入模式： i 光标之前 I 本行开头 a 光标之后 A 本行结尾 o 本行之后新增一行插入 O 本行之前新增一行插入 s 删除当前字符插入 S 删除当前行插入 2 复制粘贴撤销删除在normal mode下可以进行以下操作： yy 复制当前行 （y代表 yank） dd 剪切当前行 p 粘贴 paste u 撤销 undo （挖坑，u撤销的到底是什么？） &lt;ctrl-r&gt; 重做 redo 3 可视化编辑 v 文本块编辑 V 行块编辑 Ctrl-v 块编辑 123y Yank text (copy)d Delete text and save to registerc Delete text, save to register, and start insert mode 后序： 本文以学windows文本编辑器的逻辑介绍了vim。学vim重要的是提高效率，如何快速入门vim？我想是掌握最常用的操作，抛弃那些看起来效率很高但是使用频率低的操作（比如e、E、ge、gE），这些只会徒增记忆的烦恼。待到使用这些命令成为肌肉记忆时，再学习也不迟。 好了，学会以上这些就算简单入门了，实际上vim还有更多命令，能带来效率质的提高。看不如动手，去力扣刷题吧，感受vim的魅力。","link":"/2023/11/22/%E5%B7%A5%E5%85%B7%E5%AD%A6%E4%B9%A0/Vim/Vim-1/"},{"title":"Learn Vim Efficiently 2","text":"这里将介绍vim的语法和光标浏览，这几乎是vim最重要的部分。 一、语法强烈推荐阅读： https://github.com/iggredible/Learn-Vim/blob/master/ch04_vim_grammar.md 不同于其他文本编辑器的快捷键（需要同时按下两个键或者三个键），vim的命令更像是编程，有一套特定的语法。 在vim中只有一个语法规则： 1动词+名词 1.1 动词所谓动词就是Operator，操作符。 用:h operator可以查看16种操作符，这里列举三种最常用的操作符。 123y Yank text (copy)d Delete text and save to registerc Delete text, save to register, and start insert mode 1.2 名词所谓名词就是motions，你用来在vim中移动的符号。这里是一些motions。 1234567h Leftj Downk Upl Rightw 移动到下一个单词b 反向移动到下一个单词$ 移动到本行末尾 1.3 动词+名词的语法体现假设你有如下文本： 1cosnt string learn = “vim”; 在正常模式下，你的光标在字母c上。 复制一整行:y$ y是复制，$是移动到一行末尾 删除const：dw d删除w一个单词 向左拷贝3个字母：y3h 删除2个单词：d2w 所以vim的命令不需要刻意记忆，就像自然语言。 以行为单位的操作很频繁，所以vim将准备了一些行操作的快捷方式：yy,dd和cc 1.4 更加快捷的操作假设你有如下文本： 1234int print(){ console.log(&quot;hello vim&quot;); int a[15];} 快速删除括号内的内容di( 快速删除双引号里的内容di&quot; 快速删除中括号内的内容di[ 这将是vim的必杀技。di代表着delete inner。对于结构化的文本，特别是代码。 12i + object Inner text objecta + object Outer text object da(将会连括号一起删除。 1234567891011w A wordp A paragraphs A sentence( or ) A pair of ( ){ or } A pair of { }[ or ] A pair of [ ]&lt; or &gt; A pair of &lt; &gt;t XML tags&quot; A pair of &quot; &quot;' A Pair of ' '` A pair of ` ` 二、光标移动强烈推荐阅读： https://github.com/iggredible/Learn-Vim/blob/master/ch05_moving_in_file.md 光标移动是很基础且重要的内容，一般我们退出编辑模式就是进行光标的移动。 2.1 字符移动12345hjklN + Motion 比如说5H向左移动5个字符。 2.2 单词间移动顾名思义，在单词间移动。 12345w Move forward to the beginning of the next worde Move forward one word to the end of the next wordb Move backward to beginning of the previous word 一般命令都会有大写和小写两个版本，或者代表着两个方向，或者代表着两个不同的意思。 123456W Move forward to the beginning of the next WORDE Move forward one word to the end of the next WORDB Move backward to beginning of the previous WORDge Move backward to end of the previous wordgE Move backward to end of the previous WORD 那么大写的单词和小写的单词有什么区别呢？单词都是被空白字符分隔的字符串。 小写单词只包括字母和数字 大写单词包括任何字符除了空格、制表符和 EOL 2.3 行间移动或者叫行内水平移动更佳。 1230 Go to the first character in the current line$ Go to the last char in the current linen| Go the column n in the current line 值得说是n|，在代码的报警信息中经常能看到第几行第几列报错，使用这个命令能快速定位到出错列。n代表任意数字。 快捷的操作：行内搜索。我认为这是vim的第二个必杀技。 12f Search forward for a match in the same linet Search forward for a match in the same line, stopping before match 利用f可以快速到达你想要的字符面前。比如说fa，快速将光标定位到第一个a的位置。 快速记住f和t的区别：f代表find，找到。t代表till，直到。 同样大小写两个版本代表着两个方向。 12345F Search backward for a match in the same lineT Search backward for a match in the same line, stopping before match; Repeat the last search in the same line using the same direction, Repeat the last search in the same line using the opposite direction 使用;和.能避免重复劳动。记住上次的 行内查找操作。 2.4 行号移动这才是名副其实的行间移动。比如说你想到第7行，命令7G 1234gg Go to the first lineG Go to the last linenG Go to line nn% Go to n% in file 2.5 搜索与替换终于来了，全文搜索与替换。 1234/ Search forward for a match? Search backward for a matchn Repeat last search in same direction of previous searchN Repeat last search in opposite direction of previous search 比如说，现在我们有这样一段文本： 123const int a = 1;const int b = 2;int c = 3; 现在我们想要将所有的int都替换为float： \\int&lt;Enter&gt; 这时你将定位到第一个int cwfloat&lt;Esc&gt; change word改变一个单词，然后输入float n. 继续下一个搜索，然后用点命令重复改变 这时你就能发现vim的快捷了。 还有一些快捷命令： 1234* Search for whole word under cursor forward# Search for whole word under cursor backwardg* Search for word under cursor forwardg# Search for word under cursor backward g*和*的作用，客观自行搜索。 2.6 窗口与浏览To scroll, you have 3 speed increments: full-screen (Ctrl-F/Ctrl-B), half-screen (Ctrl-D/Ctrl-U), and line (Ctrl-E/Ctrl-Y). 123456* Ctrl-E Scroll down a lineCtrl-D Scroll down half screenCtrl-F Scroll down whole screen* Ctrl-Y Scroll up a lineCtrl-U Scroll up half screenCtrl-B Scroll up whole screen You can also scroll relatively to the current line (zoom screen sight): 123zt Bring the current line near the top of your screen* zz Bring the current line to the middle of your screenzb Bring the current line near the bottom of your screen 这里留下作者的话： Finally, realize that you do not need to know every single Vim command to be productive. Most Vim users don’t. I don’t. Learn the commands that will help you accomplish your task at that moment. Take your time. Navigation skill is a very important skill in Vim. Learn one small thing every day and learn it well. 三、Vimrc3.1 是什么？vimrc是vim的配置文件。 3.2 有什么用？它能将某些设置永久保存。什么意思呢？比如说，你现在打开vim设置了行号:set number，当你下一次打开vim时，这个设置就失效了。通过vimrc就能永久保存设置。 一般vimrc在用户目录下， ~/.vimrc. 3.3 它有哪些内容？一般来说，vimrc主要配置以下内容： Plugins Settings Custom Funcitons Custom Commands Mappings 我们只挑常用的讲，设置settings和映射mappings。 当你改变vimrc时，记得source it。 Save it (:w), then source it (:source %). 3.4 设置你可以准备一些常用的设置： 12set numberset nocompatible Since we are learning about Vim and not Vi, a setting that you must have is the nocompatible option. Add set nocompatible in your vimrc. Many Vim-specific features are disabled when it is running on compatible option. 3.5 映射你可以将一些键位映射成一系列命令的组合。这是个非常有用的功能。比方说，你如果不习惯vim的hjkl你可以映射为类似方向键布局的jkli。 语法为： 1nnoremap &lt;key&gt; &lt;key&gt; n意味着normal模式 nore意味着non-recursive，不递归的 map就是映射 如何理解non-recursive呢？让我们来看一个例子： 你现在想要实现这样一个功能：按B就能在每一行的末尾加一个分号，然后退回到上一个单词。你写出这样： 1nmap B A;&lt;esc&gt;B 注意，A行末尾插入，分号，esc退回到normal模式，B回退一个单词。 这看起来很美好，但实际上这个命令会加无限多的分号。除非你按Ctrl-C停止。 为什么？因为没有设置不递归，最后一个B也被解释为映射后的B，而不是映射前的B（回退单词）。 所以，最好在平常中都使用不递归的映射。 好了，现在你可以实现一些快捷的功能了。 1inoremap jk &lt;esc&gt; 这个命令在插入模式下，同时按住jk就能退出插入模式。 map命令的首字母对应不同的模式，这里留给大家探索。 四、后序多用，多折腾。 这里留下作者的话： Vimrc is an important component of Vim customization. A good way to start building your vimrc is by reading other people’s vimrcs and gradually build it over time. The best vimrc is not the one that developer X uses, but the one that is tailored exactly to fit your thinking framework and editing style.","link":"/2023/11/22/%E5%B7%A5%E5%85%B7%E5%AD%A6%E4%B9%A0/Vim/VIm-2/"},{"title":"Learn Vim Efficiently 3","text":"这里介绍点命令、寄存器和宏。点命令比较有用，寄存器和宏比较鸡肋。 一、 点命令点命令 . 可以重复你在vim中的改变。 1.1 change in vim在vim中，究竟什么被视为一个改变？ 简单的来说，从进入插入模式到退出之间的所有操作！ 1.2 一个点命令的快捷使用方式比如说，现在我们有这样一段文本： 123const int a = 1;const int b = 2;int c = 3; 现在我们想要将所有的int都替换为float： \\int&lt;Enter&gt; 这时你将定位到第一个int cwfloat&lt;Esc&gt; change word改变一个单词，然后输入float n. 继续下一个搜索，然后用点命令重复改变 点命令的最佳使用场景就是变量更名，当你修改完一个变量的名字，移动光标到下一个变量，然后应用点命令。 二、寄存器在vim中有10种类型的寄存器，不过我并不打算全部介绍它们。 关于寄存器，我们要知道： 有哪些？ 怎么往寄存器里存值？ 怎么从寄存器里取值？ 2.1 start by 4 types register 匿名寄存器：&quot;&quot; 拷贝寄存器：&quot;0 数字寄存器：&quot;1-9 和字母寄存器：&quot;a-z small delete register：&quot;- 寄存器总是以双引号开头，后面跟着一个符号。 匿名寄存器，是我们最常用的寄存器。这里的常用，是它被vim使用，而不是我们主动显式地调用。之前讲的dd,yy,p快捷方式都是往匿名寄存器里存值或取值。 拷贝寄存器，是我们使用y操作符时关联的寄存器。注意yy命令会同时拷贝匿名寄存器和拷贝寄存器，利用这点我们就能得到一个缓存。比如说先用yy再用dd，此时匿名寄存器被更新，如果想用第一次复制的内容，需要从拷贝寄存器拉值&quot;0p。 数字寄存器和字母寄存器都是常规寄存器，主要是往里面存值和取值。 samll ddelete register主要用于小单词的存取。当你diw一个单词的时候，这个单词就会存在这个寄存器中。 2.2 寄存器存取值对寄存器的操作都很简单，用双引号来调用一个寄存器，后面跟上你的命令。 比如，现在你有以下文本： 1const int a = 1; &quot;ad3l&lt;esc&gt; 向左删除3个字符，存在寄存器a中 j 移动到下一行 &quot;ap 从寄存器a中取值 三、宏3.1 是什么？宏可以看作一系列操作的录制，它能帮助你避免许多的重复劳动，在你需要的时候自动执行预先录制好的操作。 3.2 录制宏如果要录制宏，当然需要一个能存储的宏的容器，在vim中，自然就是寄存器了。 录制宏 1q&lt;寄存器名&gt; 结束录制 1q 比如说，录制宏到寄存器4 1q4 之后，寄存器4会记录下你的每一个按键操作。 记得结束录制。 3.3 使用宏使用宏也很简单，用@调用存在寄存器里的宏。 1@&lt;寄存器名&gt; 或者 1@@ Execute the last executed macros 这个命令直接执行上一次录制的宏。 举一个例子：我们想要大写每一个单词 12345hellovimmacrosareawesome With your cursor at the start of the line “hello”, run: 1qa0gU$jq The breakdown: qa starts recording a macro in the a register. 0 goes to beginning of the line. gU$ uppercases the text from your current location to the end of the line. j goes down one line. q stops recording. To replay it, run @a. Just like many other Vim commands, you can pass a count argument to macros. For example, running 3@a executes the macro three times.","link":"/2023/11/22/%E5%B7%A5%E5%85%B7%E5%AD%A6%E4%B9%A0/Vim/vim-3/"}],"tags":[],"categories":[{"name":"工具学习","slug":"工具学习","link":"/categories/%E5%B7%A5%E5%85%B7%E5%AD%A6%E4%B9%A0/"},{"name":"Vim","slug":"工具学习/Vim","link":"/categories/%E5%B7%A5%E5%85%B7%E5%AD%A6%E4%B9%A0/Vim/"}],"pages":[]}